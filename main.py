import telebot
from telebot import types
import os
import time
import threading
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '–í–ê–® –¢–û–ö–ï–ù –°–Æ–î–ê –ù–ê–î–û –í–°–¢–ê–í–ò–¢–¨'

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.txt'
PROMO_FILE = 'promo.txt'
BETS_FILE = 'bets.txt'

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for file in [USERS_FILE, PROMO_FILE, BETS_FILE]:
    if not os.path.exists(file):
        with open(file, 'w') as f:
            if file == PROMO_FILE:
                f.write('welcome|50|100\n')  # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞

bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def check_user(user_id):
    try:
        with open(USERS_FILE, 'r') as f:
            for line in f:
                if line.startswith(f"{user_id}|"):
                    return True
        return False
    except Exception as e:
        logger.error(f"Error checking user: {e}")
        return False

def get_user_data(user_id):
    try:
        with open(USERS_FILE, 'r') as f:
            for line in f:
                if line.startswith(f"{user_id}|"):
                    parts = line.strip().split('|')
                    return {
                        'id': parts[0],
                        'phone': parts[1] if len(parts) > 1 else '',
                        'balance': int(parts[2]) if len(parts) > 2 else 0,
                        'status': parts[3] if len(parts) > 3 else '–ò–≥—Ä–æ–∫'
                    }
        return None
    except Exception as e:
        logger.error(f"Error getting user data: {e}")
        return None

def add_user(user_id, phone=''):
    try:
        with open(USERS_FILE, 'a') as f:
            f.write(f"{user_id}|{phone}|0|–ò–≥—Ä–æ–∫\n")
    except Exception as e:
        logger.error(f"Error adding user: {e}")

def update_user_balance(user_id, amount):
    try:
        lines = []
        with open(USERS_FILE, 'r') as f:
            lines = f.readlines()
        
        with open(USERS_FILE, 'w') as f:
            for line in lines:
                if line.startswith(f"{user_id}|"):
                    parts = line.strip().split('|')
                    new_balance = int(parts[2]) + amount
                    parts[2] = str(new_balance)
                    line = '|'.join(parts) + '\n'
                f.write(line)
    except Exception as e:
        logger.error(f"Error updating balance: {e}")

def set_user_bet(user_id, game_type, amount):
    try:
        lines = []
        if os.path.exists(BETS_FILE):
            with open(BETS_FILE, 'r') as f:
                lines = [line for line in f if not line.startswith(f"{user_id}|")]
        
        with open(BETS_FILE, 'w') as f:
            f.writelines(lines)
            f.write(f"{user_id}|{game_type}|{amount}\n")
    except Exception as e:
        logger.error(f"Error setting bet: {e}")

def get_user_bet(user_id):
    try:
        if not os.path.exists(BETS_FILE):
            return None
            
        with open(BETS_FILE, 'r') as f:
            for line in f:
                if line.startswith(f"{user_id}|"):
                    parts = line.strip().split('|')
                    if len(parts) >= 3:
                        return {
                            'game_type': parts[1],
                            'amount': int(parts[2])
                        }
        return None
    except Exception as e:
        logger.error(f"Error getting bet: {e}")
        return None

def clear_user_bet(user_id):
    try:
        if not os.path.exists(BETS_FILE):
            return
            
        lines = []
        with open(BETS_FILE, 'r') as f:
            lines = [line for line in f if not line.startswith(f"{user_id}|")]
        
        with open(BETS_FILE, 'w') as f:
            f.writelines(lines)
    except Exception as e:
        logger.error(f"Error clearing bet: {e}")

def check_promo_code(promo_code):
    try:
        with open(PROMO_FILE, 'r') as f:
            for line in f:
                parts = line.strip().split('|')
                if len(parts) == 3:
                    code, reward, activations = parts
                    if code.lower() == promo_code.lower() and int(activations) > 0:
                        return int(reward)
        return None
    except Exception as e:
        logger.error(f"Error checking promo: {e}")
        return None

def update_promo_activations(promo_code):
    try:
        lines = []
        with open(PROMO_FILE, 'r') as f:
            lines = f.readlines()
        
        with open(PROMO_FILE, 'w') as f:
            for line in lines:
                parts = line.strip().split('|')
                if len(parts) == 3:
                    code, reward, activations = parts
                    if code.lower() == promo_code.lower():
                        activations = str(int(activations) - 1)
                        line = f"{code}|{reward}|{activations}\n"
                f.write(line)
    except Exception as e:
        logger.error(f"Error updating promo: {e}")

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        
        if len(message.text.split()) > 1:
            referrer_id = message.text.split()[1]
            if referrer_id.isdigit() and referrer_id != str(user_id):
                update_user_balance(int(referrer_id), 50)
                bot.send_message(int(referrer_id), "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 —Ä—É–±. –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!")
        
        if check_user(user_id):
            show_main_menu(message.chat.id)
        else:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
            bot.send_message(message.chat.id, 
                           "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                           "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                           reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in start: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    try:
        user_id = message.from_user.id
        phone = message.contact.phone_number
        
        if not check_user(user_id):
            add_user(user_id, phone)
            bot.send_message(message.chat.id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", 
                           reply_markup=types.ReplyKeyboardRemove())
            show_main_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    except Exception as e:
        logger.error(f"Error in handle_contact: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ú–µ–Ω—é –∏ –∏–≥—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def show_main_menu(chat_id, message_id=None):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data='play'))
        markup.row(
            types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
            types.InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å", callback_data='bonus')
        )
        markup.row(types.InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'))

        if message_id:
            try:
                bot.delete_message(chat_id, message_id)
            except:
                pass
        
        bot.send_message(chat_id, "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞!", reply_markup=markup)
    except Exception as e:
        logger.error(f"Error showing main menu: {e}")

def show_game_menu(call):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data='game_dice'),
            types.InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data='game_slots')
        )
        markup.row(
            types.InlineKeyboardButton("‚öΩ –§—É—Ç–±–æ–ª", callback_data='sport_football'),
            types.InlineKeyboardButton("üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data='sport_basketball')
        )
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu'))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error showing game menu: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

def show_game_info(call, game_type):
    try:
        game_info = {
            'game_dice': {'name': 'üé≤ –ö—É–±–∏–∫', 'win_chance': '40%', 'multiplier': 2, 'emoji': 'üé≤'},
            'game_slots': {'name': 'üé∞ –°–ª–æ—Ç—ã', 'win_chance': '20%', 'multiplier': 5, 'emoji': 'üé∞'},
            'sport_football': {'name': '‚öΩ –§—É—Ç–±–æ–ª', 'win_chance': '40%', 'multiplier': 2.5, 'emoji': '‚öΩ'},
            'sport_basketball': {'name': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª', 'win_chance': '50%', 'multiplier': 2, 'emoji': 'üèÄ'}
        }.get(game_type)
        
        if not game_info:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        user_bet = get_user_bet(call.from_user.id)
        bet_text = f"{user_bet['amount']} —Ä—É–±." if user_bet and user_bet['game_type'] == game_type else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f'set_bet_{game_type}'),
            types.InlineKeyboardButton("‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å", callback_data=f'play_{game_type}')
        )
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='play'))
        
        message_text = (
            f"üéÆ –ò–≥—Ä–∞: {game_info['name']}\n"
            f"üíµ –°—Ç–∞–≤–∫–∞: {bet_text}\n"
            f"üìä –®–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à: {game_info['win_chance']}\n"
            f"üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{game_info['multiplier']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error showing game info: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã")

def process_bet(message, game_type):
    try:
        user_id = message.from_user.id
        try:
            amount = int(message.text)
            if amount <= 0:
                raise ValueError
        except ValueError:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
            return
        
        user_data = get_user_data(user_id)
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if amount > user_data['balance']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return
        
        set_user_bet(user_id, game_type, amount)
        bot.send_message(message.chat.id, f"‚úÖ –°—Ç–∞–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        show_game_info_by_type(message.chat.id, game_type)
    except Exception as e:
        logger.error(f"Error processing bet: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def show_game_info_by_type(chat_id, game_type):
    try:
        game_info = {
            'game_dice': {'name': 'üé≤ –ö—É–±–∏–∫', 'win_chance': '40%', 'multiplier': 2, 'emoji': 'üé≤'},
            'game_slots': {'name': 'üé∞ –°–ª–æ—Ç—ã', 'win_chance': '20%', 'multiplier': 5, 'emoji': 'üé∞'},
            'sport_football': {'name': '‚öΩ –§—É—Ç–±–æ–ª', 'win_chance': '40%', 'multiplier': 2.5, 'emoji': '‚öΩ'},
            'sport_basketball': {'name': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª', 'win_chance': '50%', 'multiplier': 2, 'emoji': 'üèÄ'}
        }.get(game_type)
        
        if not game_info:
            return
        
        user_id = chat_id
        user_bet = get_user_bet(user_id)
        bet_text = f"{user_bet['amount']} —Ä—É–±." if user_bet and user_bet['game_type'] == game_type else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f'set_bet_{game_type}'),
            types.InlineKeyboardButton("‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å", callback_data=f'play_{game_type}')
        )
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='play'))
        
        message_text = (
            f"üéÆ –ò–≥—Ä–∞: {game_info['name']}\n"
            f"üíµ –°—Ç–∞–≤–∫–∞: {bet_text}\n"
            f"üìä –®–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à: {game_info['win_chance']}\n"
            f"üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{game_info['multiplier']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        bot.send_message(chat_id, message_text, reply_markup=markup)
    except Exception as e:
        logger.error(f"Error showing game info by type: {e}")

def play_game(call, game_type):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'play_' –∏–∑ game_type
        game_type = game_type.replace('play_', '')
        
        user_id = call.from_user.id
        user_bet = get_user_bet(user_id)
        
        if not user_bet:
            bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞–≤–∫—É!")
            return
            
        if user_bet['game_type'] != game_type:
            bot.answer_callback_query(call.id, "‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä–µ!")
            return
            
        user_data = get_user_data(user_id)
        if not user_data:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        if user_bet['amount'] > user_data['balance']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return
            
        update_user_balance(user_id, -user_bet['amount'])
        
        game_info = {
            'game_dice': {'name': 'üé≤ –ö—É–±–∏–∫', 'win_chance': 0.4, 'multiplier': 2, 'emoji': 'üé≤', 'win_value': 1},
            'game_slots': {'name': 'üé∞ –°–ª–æ—Ç—ã', 'win_chance': 0.2, 'multiplier': 5, 'emoji': 'üé∞', 'win_value': 777},
            'sport_football': {'name': '‚öΩ –§—É—Ç–±–æ–ª', 'win_chance': 0.4, 'multiplier': 2.5, 'emoji': '‚öΩ', 'win_value': 1},
            'sport_basketball': {'name': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª', 'win_chance': 0.5, 'multiplier': 2, 'emoji': 'üèÄ', 'win_value': 1}
        }.get(game_type)  # –¢–µ–ø–µ—Ä—å game_type –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'play_'
        
        if not game_info:
            bot.answer_callback_query(call.id, "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        msg = bot.send_dice(call.message.chat.id, emoji=game_info['emoji'])
        time.sleep(4)
        
        dice_result = msg.dice.value
        is_win = False
        
        if game_type == 'game_dice' and dice_result == game_info['win_value']:
            is_win = True
        elif game_type == 'game_slots' and dice_result == game_info['win_value']:
            is_win = True
        elif game_type in ['sport_football', 'sport_basketball'] and random.random() < game_info['win_chance']:
            is_win = True
            
        if is_win:
            win_amount = int(user_bet['amount'] * game_info['multiplier'])
            update_user_balance(user_id, win_amount)
            bot.send_message(call.message.chat.id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} —Ä—É–±.!")
        else:
            bot.send_message(call.message.chat.id, "üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            
        clear_user_bet(user_id)
        
    except Exception as e:
        logger.error(f"Error in play_game: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            update_user_balance(user_id, user_bet['amount'])
            
 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    try:
        if call.data == 'profile':
            show_profile(call)
        elif call.data == 'bonus':
            show_bonus(call)
        elif call.data == 'support':
            show_support(call)
        elif call.data == 'menu':
            show_main_menu(call.message.chat.id, call.message.message_id)
        elif call.data == 'play':
            show_game_menu(call)
        elif call.data in ['game_dice', 'game_slots', 'sport_football', 'sport_basketball']:
            show_game_info(call, call.data)
        elif call.data.startswith('set_bet_'):
            game_type = call.data.split('_')[2]
            msg = bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
            bot.register_next_step_handler(msg, lambda m: process_bet(m, game_type))
        elif call.data.startswith('play_'):
            game_type = call.data.split('_')[1]
            play_game(call, game_type)
        elif call.data == 'promo':
            msg = bot.send_message(call.message.chat.id, "üéü –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
            bot.register_next_step_handler(msg, process_promo_code)
        elif call.data == 'deposit':
            show_deposit(call)
        elif call.data == 'withdraw':
            show_withdraw(call)
    except Exception as e:
        logger.error(f"Error in callback handler: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_promo_code(message):
    try:
        user_id = message.from_user.id
        promo_code = message.text.strip()
        
        reward = check_promo_code(promo_code)
        if reward:
            update_user_balance(user_id, reward)
            update_promo_activations(promo_code)
            bot.send_message(message.chat.id, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} —Ä—É–±.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
    except Exception as e:
        logger.error(f"Error processing promo: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def show_profile(call):
    try:
        user_data = get_user_data(call.from_user.id)
        if not user_data:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit'),
            types.InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data='withdraw')
        )
        markup.row(types.InlineKeyboardButton("üéü –ü—Ä–æ–º–æ–∫–æ–¥", callback_data='promo'))
        markup.row(types.InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='menu'))
        
        profile_text = (
            f"‚ú® –ü—Ä–æ—Ñ–∏–ª—å\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üë§ –ò–º—è: {call.from_user.first_name}\n"
            f"üÜî ID: {user_data['id']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} —Ä—É–±.\n\n"
            f"‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=profile_text,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

def show_bonus(call):
    try:
        ref_link = f"https://t.me/{bot.get_me().username}?start={call.from_user.id}"
        
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton(
            "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
       url=f"https://t.me/share/url?url={ref_link}&text=üéâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫—Ä—É—Ç–æ–º—É –∏–≥—Ä–æ–≤–æ–º—É –±–æ—Ç—É!"
        ))
        markup.row(types.InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='menu'))

        message_text = (
            f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n"
            f"<code>{ref_link}</code>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë"
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=message_text,
            reply_markup=markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error showing bonus: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–Ω—É—Å–æ–≤")

def show_support(call):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/your_support"))
        markup.row(types.InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data='menu'))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, "
                 "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error showing support: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

def show_deposit(call):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='profile'))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
                 "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @your_support\n\n"
                 "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error showing deposit: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

def show_withdraw(call):
    try:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='profile'))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
                 "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @your_support\n\n"
                 "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID, —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error showing withdraw: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–≤–æ–¥–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def polling():
    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    bot_thread = threading.Thread(target=polling)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
